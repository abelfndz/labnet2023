/*Recuperación básica de datos*/

/* EJERCICIO 1
Recuperar id, apellido, fecha de contratación, salario de los empleados.
Tip: notar presencia de valores nulos
*/
SELECT ID, LAST_NAME AS 'APELLIDO', HIRE_DATE AS 'FECHA DE CONTRATACION', SALARY AS 'SALARIO'
FROM TEST.EMPLOYEES
ORDER BY ID ASC;

/* EJERCICIO 2
Recuperar id, apellido, fecha de contratación, salario anual de los empleados.
*/
SELECT ID, LAST_NAME AS 'APELLIDO', HIRE_DATE AS 'FECHA DE CONTRATACION', SALARY * 12 AS 'SALARIO ANUAL'
FROM TEST.EMPLOYEES
ORDER BY ID ASC;
/* EJERCICIO 4
Recuperar id, apellido y nombre, fecha de contratación, salario anual de los
empleados.
*/
SELECT ID, CONCAT(LAST_NAME, ' ', FIRST_NAME) AS 'APELLIDO Y NOMBRE', HIRE_DATE, SALARY * 12 AS 'SALARIO ANUAL'
FROM TEST.EMPLOYEES
ORDER BY ID ASC;
/* EJERCICIO 5
Recuperar lista de departamentos que tienen empleados:
*/
/*
	a. Recuperar lista de departamentos de los empleados
*/
SELECT D.DEPARTMENT_NAME AS 'NOMBRE DEPARTAMENTO'
FROM TEST.EMPLOYEES AS E
JOIN TEST.DEPARTMENTS AS D ON E.DEPARTMENT_ID = D.ID
ORDER BY D.DEPARTMENT_NAME ASC;
/*
	b. Recuperar lista no repetida de departamentos de los empleados
*/
SELECT DISTINCT D.DEPARTMENT_NAME AS 'NOMBRE DEPARTAMENTO'
FROM TEST.EMPLOYEES AS E
JOIN TEST.DEPARTMENTS AS D ON E.DEPARTMENT_ID = D.ID
ORDER BY D.DEPARTMENT_NAME ASC;

/* EJERCICIO 5
Recuperar máximo, mínimo, promedio, y suma total de fecha de contratación de
los empleados.
*/

SELECT
  MAX([HIRE_DATE]) AS MAX_HIRE_DATE,
  MIN([HIRE_DATE]) AS MIN_HIRE_DATE,
  AVG(CAST([HIRE_DATE] AS FLOAT)) AS AVG_HIRE_DATE,
  SUM(DATEDIFF(DAY, '2000-01-01', [HIRE_DATE])) AS TOTAL_DAYS
FROM [TEST].[EMPLOYEES];

/* EJERCICIO 6
Recuperar lista de empleados cuyo salario sea menor a 2000.
*/

SELECT ID, FIRST_NAME AS 'NOMBRE' , LAST_NAME AS 'APELLIDO', SALARY AS 'SALARIO'
FROM TEST.EMPLOYEES
WHERE SALARY < 2000
ORDER BY SALARY ASC;

/* EJERCICIO 7
Recuperar lista de empleados cuyo salario sea menor a 2000.
*/

SELECT ID, FIRST_NAME AS 'NOMBRE', LAST_NAME AS 'APELLIDO', SALARY AS 'SALARIO'
FROM TEST.EMPLOYEES
WHERE SALARY BETWEEN 1800 AND 3000
ORDER BY SALARY ASC;

/* EJERCICIO 8
Recuperar lista de empleados cuyo departamento sea 10 o 30 o 31.
*/

SELECT ID, FIRST_NAME AS 'NOMBRE', LAST_NAME AS 'APELLIDO', DEPARTMENT_ID AS 'ID DEPARTAMENTO'
FROM TEST.EMPLOYEES
WHERE DEPARTMENT_ID IN (10, 30, 31)
ORDER BY DEPARTMENT_ID ASC;


/* EJERCICIO 9
Recuperar lista de empleados cuyo apellido empiece con F.
*/

SELECT ID, FIRST_NAME AS 'NOMBRE', LAST_NAME AS 'APELLIDO'
FROM TEST.EMPLOYEES
WHERE LAST_NAME LIKE 'F%'
ORDER BY LAST_NAME ASC;

/* EJERCICIO 10
Recuperar lista de empleados cuyo job_id:
*/
/*
	a. No hay sido definido
*/

SELECT ID, FIRST_NAME AS 'NOMBRE', LAST_NAME AS 'APELLIDO', JOB_ID AS 'ID TRABAJO'
FROM TEST.EMPLOYEES
WHERE JOB_ID IS NULL OR JOB_ID = '';



/*
	b. Haya sido definido.
*/

SELECT ID, FIRST_NAME AS 'NOMBRE', LAST_NAME AS 'APELLIDO', JOB_ID AS 'ID TRABAJO'
FROM TEST.EMPLOYEES
WHERE JOB_ID IS NOT NULL AND JOB_ID <> '';

/* EJERCICIO 11
Recuperar lista de empleados cuyo job_id sea ‘AD_CTB’ o ‘FQ_GRT’ (sin usar
IN) y cuyo salario sea mayor a 1900.
*/

SELECT ID, FIRST_NAME AS 'NOMBRE', LAST_NAME AS 'APELLIDO', JOB_ID AS 'ID TRABAJO', SALARY AS 'SALARIO'
FROM TEST.EMPLOYEES
WHERE (JOB_ID = 'AD_CTB' OR JOB_ID = 'FQ_GRT') AND SALARY > 1900;

/* EJERCICIO 13
Recuperar empleados ordenados por fecha de ingreso (desde más viejo a más
nuevo).
*/

SELECT ID, FIRST_NAME AS 'NOMBRE', LAST_NAME AS 'APELLIDO', HIRE_DATE AS 'FECHA DE INGRESO'
FROM TEST.EMPLOYEES
ORDER BY HIRE_DATE ASC;

/* EJERCICIO 14
Recuperar empleados ordenados por fecha de ingreso descendente y apellido
ascendente.
*/

SELECT ID, FIRST_NAME AS 'NOMBRE', LAST_NAME AS 'APELLIDO', HIRE_DATE AS 'FECHA DE INGRESO'
FROM TEST.EMPLOYEES
ORDER BY HIRE_DATE DESC, LAST_NAME ASC;

/* EJERCICIO 15
Recuperar empleados ordenados por fecha de ingreso descendente y apellido
ascendente.
*/

SELECT LAST_NAME AS 'APELLIDO', SALARY * 12 AS 'SALARIO ANUAL'
FROM [TEST].[EMPLOYEES]
ORDER BY 'SALARIO ANUAL' ASC;

/* EJERCICIO 17
Recuperar lista de empleados con la descripción del departamento al que cada
uno pertenece.
*/

SELECT E.ID, E.FIRST_NAME AS 'NOMBRE', E.LAST_NAME AS 'APELLIDO',D.DEPARTMENT_NAME AS 'NOMBRE DEPARTAMENTO', D.DEPARTMENT_DESCRIPTION AS 'DESCRIPCION DEPARTAMENTO'
FROM TEST.EMPLOYEES AS E
INNER JOIN TEST.DEPARTMENTS AS D ON E.DEPARTMENT_ID = D.ID
ORDER BY D.DEPARTMENT_NAME ASC;

/* EJERCICIO 18
Recuperar lista de empleados con la descripción del departamento, tengan o no
departamento asignado.
*/

SELECT E.ID, E.FIRST_NAME AS 'NOMBRE', E.LAST_NAME AS 'APELLIDO',D.DEPARTMENT_NAME AS 'NOMBRE DEPARTAMENTO', D.DEPARTMENT_DESCRIPTION AS 'DESCRIPCION DEPARTAMENTO'
FROM TEST.EMPLOYEES AS E
LEFT JOIN TEST.DEPARTMENTS AS D ON E.DEPARTMENT_ID = D.ID
ORDER BY D.DEPARTMENT_NAME ASC;

/* EJERCICIO 19
Recuperar lista de departamentos con empleados de cada departamento, tengan o
no empleados asociados.
*/
SELECT D.ID AS 'DEPARTAMENTO ID', D.DEPARTMENT_NAME AS 'NOMBRE DE DEPARTAMENTO', E.ID AS 'ID EMPLEADO', E.FIRST_NAME AS 'NOMBRE', E.LAST_NAME AS 'APELLIDO'
FROM TEST.DEPARTMENTS AS D
LEFT JOIN TEST.EMPLOYEES AS E ON D.ID = E.DEPARTMENT_ID
ORDER BY D.DEPARTMENT_NAME, E.LAST_NAME;

/* EJERCICIO 20
Recuperar lista de subordinados por cada mánager
*/

SELECT MANAGER_ID AS 'ID MANAGER', STRING_AGG(LAST_NAME, ', ') AS 'LISTA DE EMPLEADOS'
FROM TEST.EMPLOYEES
GROUP BY MANAGER_ID;

/* EJERCICIO 21
Recuperar máximo, mínimo, promedio, y suma total de salarios de los empleados.
*/
SELECT
    MAX(SALARY) AS 'SALARIO MAXIMO',
    MIN(SALARY) AS 'SALARIO MINIMO',
    AVG(SALARY) AS 'SALARIO PROMEDIO',
    SUM(SALARY) AS 'SALARIO TOTAL'
FROM TEST.EMPLOYEES;

/* EJERCICIO 22
Recuperar máximo, mínimo, promedio, y suma total de fecha de contratación de
los empleados.
*/

SELECT
    MAX(HIRE_DATE) AS 'MAXIMA FECHA DE CONTRATACION',
    MIN(HIRE_DATE) AS 'MINIMA FECHA DE CONTRATACION',
    AVG(DATEDIFF(day, '1900-01-01', HIRE_DATE)) AS 'PROMEDIO DE DIAS DE CONTRATACION',
    SUM(DATEDIFF(day, '1900-01-01', HIRE_DATE)) AS 'SUMA DE DIAS DE CONTRATACION'
FROM TEST.EMPLOYEES;

/* EJERCICIO 23
Obtener la cantidad de empleados de cada departamento.
*/

SELECT D.DEPARTMENT_NAME AS 'DEPARTAMENTO', COUNT(E.ID) AS 'CANTIDAD DE EMPLEADOS'
FROM TEST.DEPARTMENTS AS D
LEFT JOIN TEST.EMPLOYEES AS E ON D.ID = E.DEPARTMENT_ID
GROUP BY D.DEPARTMENT_NAME
ORDER BY D.DEPARTMENT_NAME;

/* EJERCICIO 24
Obtener la cantidad de empleados por cada departamento y job.
*/

SELECT D.DEPARTMENT_NAME AS 'DEPARTAMENTO', J.JOB_NAME AS 'TRABAJO', COUNT(E.ID) AS 'CANTIDAD DE EMPLEADOS'
FROM TEST.DEPARTMENTS AS D
LEFT JOIN TEST.EMPLOYEES AS E ON D.ID = E.DEPARTMENT_ID
LEFT JOIN TEST.JOBS AS J ON E.JOB_ID = J.ID
GROUP BY D.DEPARTMENT_NAME, J.JOB_NAME
ORDER BY D.DEPARTMENT_NAME, J.JOB_NAME;

/* EJERCICIO 25
Recuperar los departamentos y el salario promedio si es menor a 1200.
*/

SELECT D.DEPARTMENT_NAME AS 'DEPARTAMENTO', AVG(E.SALARY) AS 'SALARIO PROMEDIO'
FROM TEST.DEPARTMENTS AS D
INNER JOIN TEST.EMPLOYEES AS E ON D.ID = E.DEPARTMENT_ID
GROUP BY D.DEPARTMENT_NAME
HAVING AVG(E.SALARY) < 1200;

/* EJERCICIO 26
Crear insert de todos los campos en orden.
*/

INSERT INTO TEST.EMPLOYEES 
(ID, FIRST_NAME, LAST_NAME, SALARY, DEPARTMENT_ID, JOB_ID, HIRE_DATE, MANAGER_ID)
VALUES (100, 'Abel', 'Fernandez', 3500, 30, 'FQ_OPR', '2023-09-03', 1);

/* EJERCICIO 27
Crear insert usando solamente los campos obligatorios.
*/

INSERT INTO TEST.EMPLOYEES 
(ID, FIRST_NAME, LAST_NAME,HIRE_DATE)
VALUES (110, 'Maximiliano', 'Fernandez','2023-09-03');

/* EJERCICIO 29
Crear un nuevo empleado basado en los datos de Gustavo Boulette:
cambiando su nombre
aumentando su sueldo en $200.
blanqueando su manager.
*/

INSERT INTO TEST.EMPLOYEES(ID,FIRST_NAME,LAST_NAME,SALARY,DEPARTMENT_ID,JOB_ID,HIRE_DATE)
SELECT 111,'Abel',LAST_NAME,(SALARY + 200), DEPARTMENT_ID, JOB_ID, HIRE_DATE
FROM TEST.EMPLOYEES
WHERE LAST_NAME = 'Boulette' AND FIRST_NAME = 'Gustavo';

/* EJERCICIO 30
Actualizar salario del empleado 10 a $1100.
*/
UPDATE TEST.EMPLOYEES
SET SALARY = 1100
WHERE ID = 10;

/* EJERCICIO 31
Aumentar salario en un 10% a todos los empleados del departamento 40.
*/

UPDATE TEST.EMPLOYEES
SET SALARY = SALARY * 1.10
WHERE DEPARTMENT_ID = 40;

/* EJERCICIO 32
Eliminar departamentos cuyo id sea mayor a 50.
*/

SELECT ID,DEPARTMENT_NAME,LOCATION_ID,DEPARTMENT_DESCRIPTION FROM TEST.DEPARTMENTS WHERE [ID] > 50;

DELETE FROM TEST.DEPARTMENTS WHERE [ID] > 50;

SELECT ID,DEPARTMENT_NAME,LOCATION_ID,DEPARTMENT_DESCRIPTION FROM TEST.DEPARTMENTS WHERE [ID] > 50;

/* EJERCICIO 33
Eliminar departamento 40.
*/
SELECT ID,FIRST_NAME,LAST_NAME,SALARY,DEPARTMENT_ID,JOB_ID,HIRE_DATE FROM [TEST].[EMPLOYEES] WHERE [DEPARTMENT_ID] = 40;

DELETE FROM [TEST].[DEPARTMENTS] WHERE [ID] = 40;
